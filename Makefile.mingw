##
## @file Makefile.mingw
## @desc Makefile for MinGW-based tools.
##

#
# Configurations
#

# input options
X64:=0
DEBUG:=0
SHARED:=0

# source, target and output
SOURCE_DIR:=.\src
TARGET_DIR:=.\obj
OUTPUT_DIR:=.\lib

# C/C++ toolchain
CC:=g++
RC:=windres
LD:=g++
AR:=ar
RANLIB:=ranlib
STRIP:=strip

# C/C++ toolchain parameters
CFLAGS:=
RFLAGS:=
LFLAGS:=
AFLAGS:=

# CPU flags
ifneq ($(if $(X64),$(X64),0),0)
# 64-bit
TARGET_DIR:=$(TARGET_DIR)\x64
OUTPUT_DIR:=$(OUTPUT_DIR)\x64
X64_TAG:=x64
X64_CFLAGS:=
X64_RFLAGS:=
X64_LFLAGS:=
else
# 32-bit
TARGET_DIR:=$(TARGET_DIR)\x86
OUTPUT_DIR:=$(OUTPUT_DIR)\x86
X64_TAG:=x86
X64_CFLAGS:=
X64_RFLAGS:=
X64_LFLAGS:=
endif

# debug flags
ifneq ($(if $(DEBUG),$(DEBUG),0),0)
# debug build
TARGET_DIR:=$(TARGET_DIR)-debug
DEBUG_TAG:=d
DEBUG_CFLAGS:=-DDEBUG=1 -D_DEBUG=1 -g
DEBUG_RFLAGS:=-DDEBUG=1 -D_DEBUG=1
DEBUG_LFLAGS:=-g
else
# release build
TARGET_DIR:=$(TARGET_DIR)-release
DEBUG_TAG:=
DEBUG_CFLAGS:=-O2 -DNDEBUG
DEBUG_RFLAGS:=
DEBUG_LFLAGS:=
endif

# shared flags
ifneq ($(if $(SHARED),$(SHARED),0),0)
# shared build
TARGET_DIR:=$(TARGET_DIR)-shared
SHARED_TAG:=
SHARED_CFLAGS:=
SHARED_RFLAGS:=
SHARED_LFLAGS:=
else
# static build
TARGET_DIR:=$(TARGET_DIR)-static
SHARED_TAG:=s
SHARED_CFLAGS:=-static
SHARED_RFLAGS:=
SHARED_LFLAGS:=-static
endif

# modules
MODULES:=\
	$(TARGET_DIR)\hellolib.o \
	$(TARGET_DIR)\dllmain.o \
	$(TARGET_DIR)\resource.o

# headers
HEADERS:=\
	$(TARGET_DIR)\hellolib.h

# directories
INCLUDE_DIRS:=-I.\include
LIBRARY_DIRS:=

# libraries
LIBRARIES:=

# library name
ifneq ($(if $(SHARED),$(SHARED),0),0)
OUTPUT:=libhello$(SHARED_TAG)$(DEBUG_TAG).dll
IMPLIB:=libhello$(SHARED_TAG)$(DEBUG_TAG).dll.a
else
OUTPUT:=libhello$(SHARED_TAG)$(DEBUG_TAG).a
endif

# common flags
ifneq ($(if $(SHARED),$(SHARED),0),0)
COMMON_DEFINES:=-DUNICODE=1 -D_UNICODE=1 -DHELLOLIB_DLL
else
COMMON_DEFINES:=-DUNICODE=1 -D_UNICODE=1
endif
COMMON_CFLAGS:=-Wall $(INCLUDE_DIRS) $(COMMON_DEFINES) $(X64_CFLAGS) $(DEBUG_CFLAGS) $(SHARED_CFLAGS)
COMMON_RFLAGS:=$(X64_RFLAGS) $(DEBUG_RFLAGS) $(SHARED_RFLAGS)
COMMON_LFLAGS:=-Wall -static-libgcc -static-libstdc++ $(LIBRARY_DIRS) $(X64_LFLAGS) $(DEBUG_LFLAGS) $(SHARED_LFLAGS)
COMMON_AFLAGS:=


#
# Rules
#

all: prepare $(OUTPUT_DIR)\$(OUTPUT)

prepare:
	if not exist $(TARGET_DIR) mkdir 2>NUL $(TARGET_DIR)
	if not exist $(OUTPUT_DIR) mkdir 2>NUL $(OUTPUT_DIR)

check: all
	$(MAKE) -fMakefile-tests.mingw X64=$(X64) DEBUG=$(DEBUG) SHARED=$(SHARED) RTLSHARED=$(RTLSHARED) check

clean:
	if exist $(TARGET_DIR) del /q 2>NUL $(TARGET_DIR)\*.o

clean-all: clean
	if exist $(OUTPUT_DIR) del /q 2>NUL $(OUTPUT_DIR)\$(OUTPUT)
ifneq ($(if $(SHARED),$(SHARED),0),0)
	if exist $(OUTPUT_DIR) del /q 2>NUL $(OUTPUT_DIR)\$(IMPLIB)
endif
	$(MAKE) -fMakefile-tests.mingw X64=$(X64) DEBUG=$(DEBUG) SHARED=$(SHARED) RTLSHARED=$(RTLSHARED) clean-all

$(OUTPUT_DIR)\$(OUTPUT): $(MODULES)
ifneq ($(if $(SHARED),$(SHARED),0),0)
	$(LD) $(LFLAGS) $(COMMON_LFLAGS) -shared -o $@ $+ $(SOURCE_DIR)\module.def -Wl,--out-implib,$(OUTPUT_DIR)\$(IMPLIB) -Wl,--enable-stdcall-fixup -Wl,-subsystem,windows $(LIBRARIES)
else
	$(AR) $(AFLAGS) $(COMMON_AFLAGS) cru $@ $+
	$(RANLIB) $@
endif
ifeq ($(if $(DEBUG),$(DEBUG),0),0)
	$(STRIP) -g $@
endif

$(TARGET_DIR)\\%.o: $(SOURCE_DIR)\\%.cxx
	$(CC) $(CFLAGS) $(COMMON_CFLAGS) -o $@ -DHELLOLIB_BUILDING -c $<

$(TARGET_DIR)\\%.o: $(SOURCE_DIR)\\%.c
	$(CC) $(CFLAGS) $(COMMON_CFLAGS) -o $@ -DHELLOLIB_BUILDING -c $<

$(TARGET_DIR)\\%.o: $(SOURCE_DIR)\\%.rc
	$(RC) $(RFLAGS) $(COMMON_RFLAGS) -o $@ -DHELLOLIB_BUILDING -i $<

